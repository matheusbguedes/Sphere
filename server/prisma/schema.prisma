generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  githubId  Int    @unique
  name      String
  login     String
  avatarUrl String

  followers Friend[]      @relation("follower")
  following Friend[]      @relation("following")
  posts     Post[]
  likes     Like[]
  comments  PostComment[]
}

model Friend {
  id        String @id @default(uuid())
  follower  String @map("user_id")
  followed  String @map("friend_id")
  name      String
  avatarUrl String

  user   User @relation("following", fields: [follower], references: [id])
  friend User @relation("follower", fields: [followed], references: [id])

  @@index([follower], name: "follower")
  @@index([followed], name: "followed")
}

model Post {
  id        String @id @default(uuid())
  userId    String
  userName  String
  avatarUrl String

  postImageUrl String?
  content      String
  createdAt    DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments PostComment[]
}

model Like {
  id        String @id @default(uuid())
  userId    String
  userName  String
  avatarUrl String

  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostComment {
  id        String @id @default(uuid())
  userId    String
  userName  String
  avatarUrl String

  postId    String
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
